import { AbstractBackgroundGeolocation } from './background-geolocation.common';
export declare class BackgroundGeolocation extends AbstractBackgroundGeolocation {
    static readonly LOG_LEVEL_OFF: number;
    static readonly LOG_LEVEL_ERROR: number;
    static readonly LOG_LEVEL_WARNING: number;
    static readonly LOG_LEVEL_INFO: number;
    static readonly LOG_LEVEL_DEBUG: number;
    static readonly LOG_LEVEL_VERBOSE: number;
    static readonly DESIRED_ACCURACY_HIGH: number;
    static readonly DESIRED_ACCURACY_MEDIUM: number;
    static readonly DESIRED_ACCURACY_LOW: number;
    static readonly DESIRED_ACCURACY_VERY_LOW: number;
    private syncTaskId;
    constructor();
    private getLocationManager();
    configure(config: any, success: any, failure: any): void;
    setConfig(config: Object, success: any, failure: any): void;
    getState(success: Function): void;
    on(event: any, success: Function, failure?: (param: any) => void): void;
    changePace(value: boolean, success: any, failure: any): void;
    start(success: any, failure: any): void;
    stop(success: any, failure: any): void;
    startSchedule(success: any, failure: any): void;
    stopSchedule(success: any, failure: any): void;
    sync(success: FunctionConstructor, failure: any): void;
    getLocations(success: Function, failure: any): void;
    destroyLocations(success: any, failure: any): void;
    getCount(success: Function): void;
    clearDatabase(success: any, failure: any): void;
    insertLocation(data: any, success: any, failure: any): any;
    addGeofence(params: any, success: any, failure: any): void;
    addGeofences(geofences: any, success: any, failure: any): void;
    removeGeofence(identifier: any, success: any, failure: any): void;
    getGeofences(success: any, failure: any): void;
    removeGeofences(success: any, failure: any): void;
    getCurrentPosition(success: Function, failure: any, options: any): void;
    watchPosition(success: Function, failure: any, options: any): void;
    stopWatchPosition(): void;
    getOdometer(success: FunctionConstructor, failure: any): void;
    resetOdometer(success: any): void;
    playSound(soundId: number): void;
    getLog(success: Function): void;
    emailLog(email: string): void;
    private onLocation(location, type, isMoving);
    private onMotionChange(location, isMoving);
    private onGeofence(region, location, action);
    private onHttp(statusCode, requestData, responseData, error);
    private onError(type, error);
    private onHeartbeat(shakeCount, motionType, location);
    private onSyncComplete(locations);
    private onActivityChange(activityName);
    private onProviderChange(status);
    private onSchedule(schedule);
    private getJsObjectFromNSDictionary(dictionary);
    private getJsArrayFromNSArray(array);
    private getJsObject(object);
}
